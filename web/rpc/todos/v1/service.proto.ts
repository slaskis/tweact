// generated by protoc-gen-tweact. DO NOT EDIT.
// source: todos/v1/service.proto todos/v1/types.proto



import {
  Todo,
} from "./types.proto";

export interface TodoResponse {
  
  todo: Todo; 
}

export interface ListTodoResponse {
  
  todos: Todo[]; 
}

export interface CreateTodoRequest {
  
  title: string; 
}

export interface RemoveTodoRequest {
  
  id: string; 
}

export interface GetTodoRequest {
  
  id: string; 
}

export interface ListTodosRequest {
}


interface TwirpOptions {
  headers?: object
  fetcher?: (input: RequestInfo, init?: RequestInit) => Promise<Response>;
}

interface TwirpService {
    request<Req,Res>(method: string, variables: Req, options?: TwirpOptions): Promise<Res>;
}

export class TodoService implements TwirpService {
  prefix: string;
  fetcher: (input: RequestInfo, init?: RequestInit) => Promise<Response>;
  options: TwirpOptions;
  constructor(prefix: string, options: TwirpOptions = {}) {
      this.prefix = prefix;
      this.options = options;

      if (typeof options.fetcher == "function") {
        this.fetcher = options.fetcher
      } else if (typeof window != "undefined" && typeof window.fetch == "function") {
        this.fetcher = window.fetch
      } else if (typeof fetch == "function") {
        this.fetcher = fetch
      } else {
        throw new Error("missing fetcher")
      }

      if (!prefix.trim()) {
        throw new Error("missing prefix")
      }
  }
  
  CreateTodo = (req: CreateTodoRequest) => this.request<CreateTodoRequest, TodoResponse>("todos.v1.TodoService/CreateTodo", req)
  
  RemoveTodo = (req: RemoveTodoRequest) => this.request<RemoveTodoRequest, TodoResponse>("todos.v1.TodoService/RemoveTodo", req)
  
  GetTodo = (req: GetTodoRequest) => this.request<GetTodoRequest, TodoResponse>("todos.v1.TodoService/GetTodo", req)
  
  ListTodos = (req: ListTodosRequest) => this.request<ListTodosRequest, ListTodoResponse>("todos.v1.TodoService/ListTodos", req)

  request<Req,Res>(method: string, variables: Req, options: TwirpOptions = {}): Promise<Res> {
    return this.fetcher(this.prefix + method, {
        method: "POST",
        headers: {
            ...this.options.headers,
            ...options.headers,
            Accept: "application/json",
            "Content-Type": "application/json"
        },
        body: JSON.stringify(variables)
    })
        .then(res => res.json().then(body => ({ res, body })))
        .then(({ res, body }) => {
            if (!res.ok) {
                const err = new Error(body.msg) as TwirpError;
                err.status = res.status;
                err.code = body.code;
                err.meta = body.meta;
                throw err;
            }
            return body as Res;
        });
  }
}

interface TwirpError extends Error {
  status: number
  code: string
  meta: object
}

